cmake_minimum_required(VERSION 3.9 FATAL_ERROR)

project(retinanet_infer LANGUAGES CXX)
set(CMAKE_CXX_STANDARD 11)
#######0# 设置工程版本号
set(BOVA_SECURITY_CHECK_MAJOR_VERSION 1)
set(BOVA_SECURITY_CHECK_MINOR_VERSION 3)
set(BOVA_SECURITY_CHECK_PATCH_VERSION 0 CACHE STRING "bova security check patch version string")
set(BOVA_SECURITY_CHECK_INT_VERSION "${BOVA_SECURITY_CHECK_MAJOR_VERSION}${BOVA_SECURITY_CHECK_MINOR_VERSION}${BOVA_SECURITY_CHECK_PATCH_VERSION}")
set(BOVA_SECURITY_CHECK_VERSION "${BOVA_SECURITY_CHECK_MAJOR_VERSION}.${BOVA_SECURITY_CHECK_MINOR_VERSION}.${BOVA_SECURITY_CHECK_PATCH_VERSION}")
message( STATUS "Bova Security Check Version: " ${BOVA_SECURITY_CHECK_VERSION})

#######1# 添加CUDA编译选项
set(CMAKE_CUDA_FLAGS "--expt-extended-lambda" CACHE STRING "Flags used by the CUDA compiler during all build types." FORCE)  # 该cmake版本下，--std=c++11 不能加
set(CUDA_TOOLKIT_ROOT_DIR /usr/local/cuda-10.0)
set(CMAKE_CUDA_COMPILER /usr/local/cuda-10.0/bin/nvcc)
find_package(CUDA REQUIRED 10.0)
enable_language(CUDA)
include_directories(${CUDA_INCLUDE_DIRS})


#######2# 添加OPENCV编译选项
set(OpenCV_DIR /media/zl/Data/pkgs/opencv-3.4.7/opencv347/share/OpenCV)
find_package(OpenCV REQUIRED)
include_directories(${OpenCV_INCLUDE_DIRS})


#######3# 添加TENSORRT编译选项
set(TensorRT_DIR /media/zl/Data/pkgs/TensorRT-5.1.5.0)
if(DEFINED TensorRT_DIR)
  include_directories("${TensorRT_DIR}/include")
  link_directories("${TensorRT_DIR}/lib")
endif(DEFINED TensorRT_DIR)
#include_directories(/media/zl/Data/pkgs/TensorRT-5.1.5.0/include)
#link_directories(/media/zl/Data/pkgs/TensorRT-5.1.5.0/lib)


#######3# 编译库文件
add_library(retinanet
  csrc/cuda/decode.h
  csrc/cuda/decode.cu
  csrc/cuda/nms.h
  csrc/cuda/nms.cu
  csrc/cuda/utils.h
  csrc/engine.h
  csrc/engine.cpp
  csrc/calibrator.h
)
set_target_properties(retinanet PROPERTIES 
  CUDA_RESOLVE_DEVICE_SYMBOLS ON
)
target_link_libraries(retinanet PUBLIC nvinfer nvonnxparser ${OPENCV_LIBS})


#######4# 编译可执行文件
add_executable(main main.cpp straighten.cpp)
target_link_libraries(main PRIVATE retinanet ${OpenCV_LIBS} cuda ${CUDA_LIBRARIES})

add_executable(detect_p detect_pics.cpp)
target_link_libraries(detect_p PRIVATE retinanet ${OpenCV_LIBS} cuda ${CUDA_LIBRARIES})


#######TODO# 添加QT编译选项，未成功
#set(Qt5_DIR /home/bova/Qt5.13.2/5.13.2/gcc_64/lib/cmake/Qt5)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)
set(CMAKE_AUTOUIC ON)
find_package(Qt5 5.12.6 COMPONENTS Core Widgets Gui OpenGL Xml) # 
include_directories(${Qt5Core_INCLUDE_DIRS} ${Qt5Gui_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS} ${Qt5OpenGL_INCLUDE_DIRS} ${Qt5Xml_INCLUDE_DIRS} ${Qt5XcbQpa_INCLUDE_DIRS})

message( STATUS "qt5 prefix: " ${Qt5Xml_INCLUDE_DIRS})

#qt5_wrap_ui(ui_FILES mainwindow.ui)
#qt5_add_resources(qrc_FILES *.qrc)
if ( TARGET Qt5::Core )
  get_property( core_options TARGET Qt5::Core PROPERTY INTERFACE_COMPILE_OPTIONS )
  string( REPLACE "-fPIC" "" new_core_options "${core_options}" )
  set_property( TARGET Qt5::Core PROPERTY INTERFACE_COMPILE_OPTIONS ${new_core_options} )
  set_property( TARGET Qt5::Core PROPERTY INTERFACE_POSITION_INDEPENDENT_CODE "ON" )
  set( CMAKE_CXX_COMPILE_OPTIONS_PIE "-fPIC" )
endif()
qt5_use_modules(${PROJECT_NAME} Core Widgets OpenGL Xml Gui)


#######5# 安装路径设置
#file(GLOB HEADERS csrc/*.h ecsrc/*.h logger/*.h )
#install(TARGETS export infer generateTag infer_cuda detect2WithTrack detectWithTrack  detect_pic RUNTIME DESTINATION bin)
#install(TARGETS BOVA_SC ARCHIVE DESTINATION lib)
#install(FILES ${HEADERS} DESTINATION include)

#install(FILES base/base.h DESTINATION include/base)
#install(FILES pc-identifiers.h DESTINATION include/)
#install(FILES ini/SimpleIni.h ini/ConvertUTF.h DESTINATION include/ini)

